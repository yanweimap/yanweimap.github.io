{"meta":{"title":"AmyManualBook","subtitle":"记录每一个细节","description":null,"author":"Amy","url":"http://yoursite.com"},"pages":[{"title":"About","date":"2019-02-14T03:39:23.033Z","updated":"2019-02-14T03:39:23.033Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"Categories","date":"2019-02-14T03:39:23.033Z","updated":"2019-02-14T03:39:23.033Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2019-02-14T03:39:23.033Z","updated":"2019-02-14T03:39:23.033Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Linux包管理器","slug":"Linux/DailyTool/PackageManager","date":"2019-02-25T09:21:36.865Z","updated":"2019-02-25T09:21:36.865Z","comments":true,"path":"2019/02/25/Linux/DailyTool/PackageManager/","link":"","permalink":"http://yoursite.com/2019/02/25/Linux/DailyTool/PackageManager/","excerpt":"","text":"包管理器介绍每个linux发行版都有自己的软件包管理器,软件通常都是存放在存储库中，并通过包的形式进行分发。处理包的工作被称为包管理。包提供了操作系统的基本组件，以及共享的库、应用程序、服务和文档。大多数包系统都是围绕包文件的集合构建的。包文件通常是一个存档文件，它包含已编译的二进制文件和软件的其他资源，以及安装脚本。包文件同时也包含有价值的元数据，包括它们的依赖项，以及安装和运行它们所需的其他包的列表如下是常见linux发行版使用的包管理器: 操作系统 软件包格式 包管理器 Ubuntu .deb apt, apt-cache, apt-get, dpkg Debian .deb apt, apt-cache, apt-get, dpkg CentOS .rpm yum Fedora .rpm dnf FreeBSD Ports, .txz make, pkg Debian 及其衍生版，如 Ubuntu、Linux Mint 和 Raspbian，它们的包格式是 .deb。APT 这款先进的包管理工具提供了大多数常见的操作命令：搜索存储库、安装软件包及其依赖项，并管理升级。在本地系统中，我们还可以使用 dpkg 程序来安装单个的 deb 文件，APT 命令作为底层 dpkg 的前端，有时也会直接调用它最近发布的 debian 衍生版大多数都包含了 apt 命令，它提供了一个简洁统一的接口，可用于通常由 apt-get 和 apt-cache 命令处理的常见操作。这个命令是可选的，但使用它可以简化一些任务CentOS、Fedora 和其它 Red Hat 家族成员使用 RPM 文件。在 CentOS 中，通过 yum 来与单独的包文件和存储库进行交互在最近的 Fedora 版本中，yum 已经被 dnf 取代，dnf 是它的一个现代化的分支，它保留了大部分 yum 的接口FreeBSD 的二进制包系统由 pkg 命令管理。FreeBSD 还提供了 Ports 集合，这是一个存在于本地的目录结构和工具，它允许用户获取源码后使用 Makefile 直接从源码编译和安装包 aptapt 介绍apt可以理解为简化的apt-get,具有更精减但足够的命令选项，而且参数选项的组织方式更为有效。除此之外，它默认启用的几个特性对最终用户也非常有帮助。例如，可以在使用 apt 命令安装或删除程序时看到进度条。 apt 常见用法1234567891011$ apt install #安装软件包$ apt remove #移除软件包$ apt purge #移除软件包及配置文件$ apt update #刷新存储库索引$ apt upgrade #升级所有可升级的软件包$ apt autoremove #自动删除不需要的包$ apt full-upgrade #在升级软件包时自动处理依赖关系$ apt search #搜索应用程序$ apt show #显示安装细节$ apt list #列出包含条件的包（已安装，可升级等）$ apt edit-sources #编辑源列表 apt-getatp-get 介绍Ubuntu系统使用apt-get作为包管理器,apt-get适用于deb包管理，主要用于自动从互联网的软件仓库中搜索、安装、升级、卸载软件或操作系统 apt-get相关的配置文件 /etc/apt/sources.listapt-get获取包位置的软件源站点 /var/cache/apt/archives用 apt-get install 安装软件时，软件包的临时存放路径 /var/lib/dpkg/available软件包的描述信息, 该软件包括当前系统所使用的安装源中的所有软件包,其中包括当前系统中已安装的和未安装的软件包. /var/lib/apt/listsapt-get update命令会从/etc/apt/sources.list中下载软件列表，并保存到该目录 apt-get 常见用法123456789101112131415161718$ apt-get install packagename #安装一个新软件包 $ apt-get -f install #修复安装 $ apt-get install package - - reinstall #重新安装包$ apt-get remove packagename #卸载一个已安装的软件包（保留配置文档） $ apt-get remove --purge packagename #卸载一个已安装的软件包（删除配置文档） $ apt-get autoremove packagename #删除包及其依赖的软件包 $ apt-get autoremove --purge packagname #删除包及其依赖的软件包+配置文件，比上面的要删除的彻底一点 $ apt-get clean #删除下载的存档文件$ apt-get autoclean #删除旧的下载档案文件$ apt-get update #检索新的包列表 apt-get update命令会扫描每一个软件源服务器，并为该服务器所具有软件包资源建立索引文件，存放在本地的/var/lib/apt/lists/目录中。 使用apt-get执行安装、更新操作时，都将依据这些索引文件，向软件源服务器申请资源$ apt-get upgrade #将系统中的所有软件包一次性升级到最新版本 可以很方便的完成在相同版本号的发行版中更新软件包。在依赖关系检查后，命令列出了目前所有需要升级的软件包，在得到用户确认后，便开始更新软件包的下载和安装。当然，apt- get upgrade命令会在最后以合理的次序，安装本次更新的软件包。系统更新需要用户等待一段时间。$ apt-get dist-upgrade #升级系统$ apt-get check #验证没有损坏的依赖项 $ apt-get source #下载源档案$ apt-get download #将二进制包下载到当前目录中$ apt-get changelog #下载并显示给定包的更改日志 apt-cacheapt-cache 介绍apt-cache是apt软件包管理工具，它可查询apt的二进制软件包缓存文件。APT包管理的大多数信息查询功能都可以由apt-cache命令实现,通过apt-cache命令配合不同的子命令和参数的使用,可以实现查找,显示软件包信息及包依赖关系等功能 apt-cache 常见用法12345678$ apt-cache show packagename #显示指定软件包的信息，包括版本号，安装状态和包依赖关系等.$ apt-cache search packagename #搜索软件包，可以按关键字查找软件包,通常用于查询的关键字会使用软件包的名字或软件包的一部分$ apt-cache showpkg packagename #显示命名包的包记录,包括版本,完整包名(包含镜像地址),依赖等$ apt-cache depends packagename #显示一个包含每个依赖关系的列表,以及可以实现该依赖关系的所有其他可能的包$ apt-cache rdepends packagename #反向查询当前包(lib)被哪些软件包依赖$ apt-cache policy packagename #显示软件包版本信息和下载源镜像地址$ apt-cache dump #显示缓存中的每个软件包的简要描述信息(信息很多,建议重定向到文件中查看)$ apt-cache unmet #显示不符合一致性的依赖关系 dpkgdpkg 介绍dpkg用来安装,删除,构建和管理deb软件包dpkg不像apt 或者apt-get可以直接匹配远程软件镜像源自动下载软件包,只能安装和配置本地用户已经下载好的deb软件包 dpkg 常见用法123456789$ dpkg -i packagewholename.deb #安装软件包$ dpkg -r packagename #删除软件包(保留配置)$ dpkg -P packagename #删除软件包(不保留配置)$ dpkg -s packagename #显示软件包相关信息(版本号,安装大小,依赖,描述,主页等)$ dpkg -L packagename #列出软件包所有相关文件$ dpkg -l packagename #显示软件包版本和软件描述$ dpkg -c packagewholename.deb #查看deb包中的内容$ dpkg -unpack packagewholename.deb #解出deb包中的内容 更多详细用法请查看 参考-3 yumyum 介绍Yum(全称为 Yellow dogUpdater, Modified)是一个在Fedora和RedHat以及CentOS中的Shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装。 yum 常见用法12345678910$ yum install packagename #安装某个软件包$ yum install package1 package2 ... #安装所有列出来的包$ yum install -y package #在 yum 提示是否继续的地方直接默认 yes$ yum install package.rpm #直接安装本地软件包$ yum update #更新已安装的包$ yum remove packagename #删除已安装的包$ yum search search_string #通过关键字搜索软件包名$ yum search all search_string #通过关键字搜索软件包所有信息,包括描述$ yum info packagename #查看软件包的信息$ yum deplist packagename #列出包的依赖 dnfdnf 介绍dnf是新一代的 rpm 软件包管理器，首先出现在 Fedora 18 这个发行版中，Fedora 22 中正式取代了 yum。dnf 包管理器相对 yum 来说，提升了用户体验、内存占用、依赖分析、运行速度等多方面的内容。dnf 使用 RPM, libsolv 和 hawkey 库进行包管理操作dnf有很多指令跟yum都类似,只有少量有区别 dnf 常见用法12345678910$ dnf install packagename #安装某个软件包$ dnf install package1 package2 ... #安装所有列出来的包$ dnf install -y package #在 dnf 提示是否继续的地方直接默认 yes$ dnf install package.rpm #直接安装本地软件包$ dnf upgrade #更新已安装的包$ dnf erase package #删除已安装的包$ dnf search search_string #通过关键字搜索软件包名$ dnf search all search_string #通过关键字搜索软件包所有信息,包括描述$ dnf info package #查看软件包的信息$ dnf repoquery --requires package #列出包的依赖 npmnpm 介绍npm是JavaScript的开源软件包管理工具,它允许用户从npm服务器上下载并安装第三方的包或者程序到本地使用,同时也允许用户上传自己编写的包或程序到npm服务器分享给其他人.关于npm的使用可以直接查看npm官方中文文档npm 中文文档 安装 npmlinux默认没有npm组件,需要手动安装12$sudo apt-get install nodejs #安装nodejs$sudo apt-get install npm #安装npm 安装完以后使用-v指令确认是否安装成功1234$ node -vv8.10.0$ npm -v3.5.2 npm 常见用法123456$ npm install &lt;Module Name&gt; #直接安装模块在当前目录的node_modules$ npm list -g #查看全局安装模块$ npm list &lt;Module Name&gt; #查看某个模块的版本号$ npm uninstall &lt;Module Name&gt; #删除模块$ npm update &lt;Module Name&gt; #更新模块$ npm search &lt;Module Name&gt; #搜索模块 package.json 配置文件每个模块都有自己的package.json文件,在自己的包目录下,用于定义包的属性相关的属性说明如下:123456789101. name - 包名 2. version - 包的版本号3. description - 包的描述4. homepage - 包的官网 url5. author - 包的作者姓名6. contributors - 包的其他贡献者姓名7. dependencies - 依赖包列表。如果依赖包没有安装，npm 会自动将依赖包安装在 node_module 目录下8. repository - 包代码存放的地方的类型，可以是 git 或 svn，git 可在 Github 上9. main - main 字段指定了程序的主入口文件，require(&apos;moduleName&apos;) 就会加载这个文件。这个字段的默认值是模块根目录下面的 index.js10. keywords - 关键字 当然也可以使用package.json管理依赖包,这里可以参考hexo的package.json文件12345678910111213141516171819&#123; &quot;name&quot;: &quot;Amy-site&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;private&quot;: true, &quot;hexo&quot;: &#123; &quot;version&quot;: &quot;3.8.0&quot; &#125;, &quot;dependencies&quot;: &#123; &quot;git&quot;: &quot;^0.1.5&quot;, &quot;gulp&quot;: &quot;^3.9.1&quot;, &quot;gulp-clean-css&quot;: &quot;^3.9.0&quot;, &quot;gulp-htmlclean&quot;: &quot;^2.7.15&quot;, &quot;gulp-htmlmin&quot;: &quot;^3.0.0&quot;, &quot;gulp-imagemin&quot;: &quot;^3.4.0&quot;, &quot;gulp-uglify&quot;: &quot;^3.0.0&quot;, &quot;hexo&quot;: &quot;^3.7.0&quot;, &quot;hexo-asset-image&quot;: &quot;0.0.3&quot;, &quot;hexo-autonofollow&quot;: &quot;^1.0.1&quot;,... 如果要添加模块到当前环境,可以直接追加模块名和版本号到dependencies部分,保存文件后,在当前目录运行1$npm install npm就能自动检索需要的module,安装到node_modules下 参考以下大佬帖子: 【Linux】- apt-get命令 linux apt-cache使用方法 ubuntu下的dpkg用法 dpkg命令的用法 NPM 使用介绍 Linux 包管理基础：apt、yum、dnf 和 pkg Linux中apt与apt-get命令的区别与解释 yum 命令讲解","categories":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"},{"name":"DailyTool","slug":"Linux/DailyTool","permalink":"http://yoursite.com/categories/Linux/DailyTool/"}],"tags":[]},{"title":"ubuntu常见工具问题debug","slug":"LinuxDebug/tooldebug","date":"2019-02-21T06:58:43.643Z","updated":"2019-02-21T06:58:43.643Z","comments":true,"path":"2019/02/21/LinuxDebug/tooldebug/","link":"","permalink":"http://yoursite.com/2019/02/21/LinuxDebug/tooldebug/","excerpt":"","text":"Ubuntu Video 无法播放mkv视频安装 h.264 decodersudo apt-get install h264encsudo apt install gstreamer1.0-libav安装完重启播放器即可 Ubuntu音频播放没有声音声卡和音量选择alsamixer 可以选择各个声卡和音量安装并打开alsamixer工具可以使用图形界面查看每路音频的音量,对应查看需要调试的音频音量(耳机/喇叭).如果要调试耳机声音,可以查看Headphone的音量那里，如果显示Headphone off，很可能时耳机设置为静音了,请使用pavucontrol关闭耳机静音另外查看下声卡的选择,F6可以选择声卡,有时默认声卡选项是空的,这时手动选择为电脑使用的声卡也能解决有声音的问题如果通过此工具设置完仍然没有声音的话，也请使用pavucontrol尝试调试 输出设备信息查看pavucontrol 可以图形界面查看输入输出设备的详细情况进入pavucontrol的窗口后,首先查看下OutPut Device栏,看一下当前音频输出设备的音量,注意查看下设备右侧有个小喇叭的图标,如果是选中的,那么意味着此设备当前是静音状态,这时点一下小喇叭图标就能解决如果显示的输出设备与当前使用的不同,也可以在此栏手动选择正确的音频输出设备 Ubuntu中文输入法/搜狗输入法配置如果安装的Ubuntu版本默认不支持中文输入法,可以手动安装fcitx输入法架构,然后根据需要安装具体的中文输入法. 切换输入法框架Ubuntu默认的输入法框架是ibus,如果要切换成fcitx(没有安装的话请手动apt-get install fcitx),需要使用X window的输入法框架管理器im-config1$im-config 然后通过图形界面一路把默认的ibus设置为fcitx 安装中文输入法比较常见的linux中文输入法有google输入法和搜狗输入法google输入法直接通过命令就能安装1$sudo apt-get install fcitx-googlepinyin 搜狗输入法需要到搜狗linux输入法的官网上下载安装包搜狗输入法for linux下载下来是个deb的包(版本号可能会有不同)sogoupinyin_2.2.0.0108_amd64.deb下载结束以后直接使用dpkg安装即可(双击下载也可以)1$dpkg -i sogoupinyin_2.2.0.0108_amd64.deb 在输入法安装结束之后,需要重启一下fcitx，再右上角小键盘(那个小键盘就是fcitx和输入法的小图标)显示的地方右键，restart即可，重启可能要花一点时间 配置输入法具体使用哪个输入法需要在fcitx 中设置,还是那个小图标,右键-&gt; Config Current input method菜单里面+或-平时使用的输入法,也可以上下调整输入法切换顺序.一般一个English,一个中文输入法就够用了,设置以后如果不能用再restart一下.如果fcitx restart后不管是手动切换输入法还是用快捷键切换，都不生效的话,需要修改下home 下的.xprofile文件(如果没有请手动创建)在.xprofile文件添加如下内容：123export GTK_IM_MODULE=fcitxexport QT_IM_MODULE=fcitxexport XMODIFIERS=&quot;@im=fcitx&quot; 然后保存，注销一下系统 再次尝试快捷键和鼠标选择输入法，中文输入正常","categories":[{"name":"LinuxDebug","slug":"LinuxDebug","permalink":"http://yoursite.com/categories/LinuxDebug/"}],"tags":[{"name":"ubuntu工具配置","slug":"ubuntu工具配置","permalink":"http://yoursite.com/tags/ubuntu工具配置/"}]},{"title":"linux计算器和时间显示","slug":"Linux/DailyTool/caculate","date":"2019-02-21T06:12:35.743Z","updated":"2019-02-21T06:12:35.743Z","comments":true,"path":"2019/02/21/Linux/DailyTool/caculate/","link":"","permalink":"http://yoursite.com/2019/02/21/Linux/DailyTool/caculate/","excerpt":"","text":"计算器bcbc 命令是命令行任意精度计算器语言，通常在linux下当计算器用。它类似基本的计算器, 使用这个计算器可以做基本的数学运算。支持加减乘除,指数(^),取余(%),开根(sqrt(n))等操作 支持参数 -i 强制交互模式 -l 指定标准数学库 -w 给POSIX bc的扩展发出警告 -s 准确处理POSIX bc语言 -q 不要打印正常的GNU bc welcome常见用法交互模式12345678$bcbc 1.07.1Copyright 1991-1994, 1997, 1998, 2000, 2004, 2006, 2008, 2012-2017 Free Software Foundation, Inc.This is free software with ABSOLUTELY NO WARRANTY.For details type `warranty&apos;.5*735quit echo+管道12$ echo &quot;3+1&quot; | bc4 bc+文件名进入bc交互式界面并自动返回文本内算式的结果1234567$ echo 5*9*4&gt;testcal.txt$ bc testcal.txtbc 1.07.1Copyright 1991-1994, 1997, 1998, 2000, 2004, 2006, 2008, 2012-2017 Free Software Foundation, Inc.This is free software with ABSOLUTELY NO WARRANTY.For details type `warranty&apos;.180 设置有效数字scale=n1234567$bc -q4/31scale=104/31.3333333333quit 进制转换使用变量 ibase表示转换前数字的数制；obase表示转换后数字的数制(obase最好放在前面)12345678obase=16ibase=1012880obase=10ibase=1680128 输入表达式可以在bc中输入表达式,bc接受变量计算12345$ bc -qa=(15-9)*5+(32-5)b=(4+8)/6a*2-b112 内置函数 sqrt(n) 开根 s(X) 正弦 c(X) 余弦 a(X) 反正弦 l(N) 自然对数 e(N) 指数对数 gnome-calculatorubuntu默认图形界面计算器支持多种计算模式,打开直接操作即可 日历calcal可以在终端显示本月的日历,当前日期高亮 查看固定月的日历默认不带参数是显示当前月的日历如果要看某年某月的日历,直接在后面跟月 年12345678$ cal 2 2017 二月 2017 日 一 二 三 四 五 六 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 查看全年的日历也可以查看全年的日历,直接带年份就行123456789101112131415161718192021222324252627282930313233343536$ cal 2019 2019 一月 二月 三月 日 一 二 三 四 五 六 日 一 二 三 四 五 六 日 一 二 三 四 五 六 1 2 3 4 5 1 2 1 2 6 7 8 9 10 11 12 3 4 5 6 7 8 9 3 4 5 6 7 8 9 13 14 15 16 17 18 19 10 11 12 13 14 15 16 10 11 12 13 14 15 16 20 21 22 23 24 25 26 17 18 19 20 21 22 23 17 18 19 20 21 22 23 27 28 29 30 31 24 25 26 27 28 24 25 26 27 28 29 30 31 四月 五月 六月 日 一 二 三 四 五 六 日 一 二 三 四 五 六 日 一 二 三 四 五 六 1 2 3 4 5 6 1 2 3 4 1 7 8 9 10 11 12 13 5 6 7 8 9 10 11 2 3 4 5 6 7 8 14 15 16 17 18 19 20 12 13 14 15 16 17 18 9 10 11 12 13 14 15 21 22 23 24 25 26 27 19 20 21 22 23 24 25 16 17 18 19 20 21 22 28 29 30 26 27 28 29 30 31 23 24 25 26 27 28 29 30 七月 八月 九月 日 一 二 三 四 五 六 日 一 二 三 四 五 六 日 一 二 三 四 五 六 1 2 3 4 5 6 1 2 3 1 2 3 4 5 6 7 7 8 9 10 11 12 13 4 5 6 7 8 9 10 8 9 10 11 12 13 14 14 15 16 17 18 19 20 11 12 13 14 15 16 17 15 16 17 18 19 20 21 21 22 23 24 25 26 27 18 19 20 21 22 23 24 22 23 24 25 26 27 28 28 29 30 31 25 26 27 28 29 30 31 29 30 十月 十一月 十二月 日 一 二 三 四 五 六 日 一 二 三 四 五 六 日 一 二 三 四 五 六 1 2 3 4 5 1 2 1 2 3 4 5 6 7 6 7 8 9 10 11 12 3 4 5 6 7 8 9 8 9 10 11 12 13 14 13 14 15 16 17 18 19 10 11 12 13 14 15 16 15 16 17 18 19 20 21 20 21 22 23 24 25 26 17 18 19 20 21 22 23 22 23 24 25 26 27 28 27 28 29 30 31 24 25 26 27 28 29 30 29 30 31 查看全年中的天数cal -j -3123456789101112131415161718 2019 一月 二月 日 一 二 三 四 五 六 日 一 二 三 四 五 六 1 2 3 4 5 32 33 6 7 8 9 10 11 12 34 35 36 37 38 39 40 13 14 15 16 17 18 19 41 42 43 44 45 46 47 20 21 22 23 24 25 26 48 49 50 51 52 53 54 27 28 29 30 31 55 56 57 58 59 三月 日 一 二 三 四 五 六 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 ncal类似cal,纵向日历123456789$ ncal 二月 2019 Sun 3 10 17 24 Mon 4 11 18 25 Tue 5 12 19 26 Wed 6 13 20 27 Thu 7 14 21 28 Fri 1 8 15 22 Sat 2 9 16 23 如果只想查看特定周几的日期，这个命令可能特别有用12$ ncal |grep ThuThu 7 14 21 28 calendar查看节日,但calendar有点像历史上的今天,显示世界上所有日期相关的重要事件 查看当天相关事件-l 0表示仅看当天的节日12345678910$ calendar -l 02月 17 Federick Eugene Ives born, 1856, pioneer of halftone2月 17 Marion Anderson born, 19022月 17 T. J. Watson, Sr. born, 18742月 17 Death of Boromir2月 17* Parshat Terumah2月 17 Jazz great Thelonius Monk dies in Englewood, New Jersey, 19822月 17 Prins Willem III (1817 - 1890)2月 17 N&apos;oubliez pas les Alexis !2月 17 Donát 精简事件但是这么查看也会把很多不相关和不关心的事件显示出来.可以通过修改配置文件精简过多的信息/usr/share/calendar/calendar.all比如把文件中多余的include注释掉12345#include &lt;calendar.world&gt;//#include &lt;calendar.argentina&gt;//#include &lt;calendar.australia&gt;//#include &lt;calendar.belgium&gt;//#include &lt;calendar.birthday&gt; 添加私人事件当然我们也可以通过calendar显示自己添加的事件,比如工作日历比如在calendar.all配置文件中添加1#include &lt;calendar.work&gt; 日历文件的格式非常简单 - mm/dd 格式日期，空格和事件描述123$ cat calendar.work03/26 Describe how the cal and calendar commands work03/27 Throw a party! 参考:1.【原创】linux命令bc使用详解2.linux BC命令行计算器3.在 Linux 命令行上使用日历","categories":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"},{"name":"DailyTool","slug":"Linux/DailyTool","permalink":"http://yoursite.com/categories/Linux/DailyTool/"}],"tags":[{"name":"计算器/日历","slug":"计算器-日历","permalink":"http://yoursite.com/tags/计算器-日历/"}]},{"title":"网络常用工具命令(1)","slug":"Linux/Network/networktool1","date":"2019-02-21T06:12:10.294Z","updated":"2019-02-21T06:12:10.294Z","comments":true,"path":"2019/02/21/Linux/Network/networktool1/","link":"","permalink":"http://yoursite.com/2019/02/21/Linux/Network/networktool1/","excerpt":"","text":"traceroutetraceroute介绍traceroute (Windows系统下是tracert) 命令利用ICMP 协议定位您的计算机和目标计算机之间的所有路由器。TTL值可以反映数据包经过的路由器或网关的数量，通过操纵独立ICMP呼叫报文的TTL值和观察该报文被抛弃的返回信息，traceroute命令能够遍历到数据包传输路径上的所有路由器。traceroute是一条缓慢的命令，因为每经过一台路由器都要花去大约10到15秒。1234$ traceroute 10.1.6.32traceroute to 10.1.6.32 (10.1.6.32), 30 hops max, 60 byte packets1 10.1.152.254 (10.1.152.254) 4.318 ms 4.603 ms 4.878 ms2 10.1.6.32 (10.1.6.32) 0.257 ms 0.219 ms 0.211 ms traceroute工作原理其详细过程如下：将传递到目的IP地址的ICMP Echo消息的TTL值被设置为1，该消息报经过第一个路由器时，其TTL值减去1，此时新产生的TTL值为0。由于TTL值被设置为0，路由器判断此时不应该尝试继续转发数据报，而是直接抛弃该数据报。由于数据报的生存周期（TTL值）已经到期，这个路由器会发送一个一个ICMP时间超时，即TTL值过期信息返回到客户端计算机。此时，发出traceroute命令的客户端计算机将显示该路由器的名称，之后可以再发送一个ICMP Echo消息并把TTL值设置为2。第1个路由器仍然对这个TTL值减1，然后，如果可能的话，将这个数据报转发到传输路径上的下一跳。当数据报抵达第2个路由器，TTL值会再被减去1，成为0值。第2个路由器会像第1个路由器一样，抛弃这个数据包，并像第1个路由器那样返回一个ICMP消息。该过程会一直持续，traceroute命令不停递增TTL值，而传输路径上的路由器不断递减该值，直到数据报最终抵达预期的目的地。当目的计算机接收到ICMP Echo消息时，会回传一个ICMP Echo Reply消息。 traceroute常见用法traceroute的用法为:traceroute [ -46dFITnreAUDV ] [ -f first_ttl ] [ -g gate,… ] [ -i device ] [ -m max_ttl ] [ -N squeries ] [ -p port ] [ -t tos ] [ -l flow_label ] [ -w MAX,HERE,NEAR ] [ -q nqueries ] [ -s src_addr ] [ -z sendwait ] [ –fwmark=num ] host [ packetlen ] 常用options参数:-4: 使用IPv4-6: 使用IPv6-d: 启用套接字级调试-F: 不分段数据包-f: 从first_ttl hop开始（而不是从1开始）-g: 通过指定的网关路由数据包 (IPv4最多8个，IPv6最多127个）-I: 使用ICMP ECHO进行跟踪路由-T: 使用TCP SYN进行跟踪路由（默认端口为80）-i: 指定要使用的网络接口-m: 设置最大跳数（最大TTL为到达）。默认值为30-N: 设置要同时尝试的探测器数量（默认值为16）-n: 不解析其域名的IP地址-p: 设置要使用的目标端口。它是“default”方法的初始udp端口值（按每个探测增加，默认为33434），或“icmp”的初始seq（也增加了，默认来自1），或一些不变的目的地其他方法的端口（默认值为80）“tcp”，53表示“udp”等）-t: 设置TOS（IPv4服务类型）或TC（IPv6流量包的值)-l: 将指定的flow_label用于IPv6数据包-W: 等待探测不超过此（默认3） 时间长于同一跳的响应时间，或者不超过一些（默认10次）下一跳，或MAX（默认5.0）秒（浮点数也允许点值）-q: 设置每跳的探测次数。默认是3更多参数和完整解释见man traceroute netstatnetstat介绍netstat列出系统上所有的网络套接字连接情况，包括 tcp, udp 以及 unix 套接字，另外它还能列出处于监听状态（即等待接入请求）的套接字。如果你想确认系统上的 Web 服务有没有起来，你可以查看80端口有没有打开。以上功能使 netstat 成为网管和系统管理员的必备利器。 netstat常见用法 -a 显示所有监听或非监听socket网络链接 12345678910111213$ netstat -aActive Internet connections (servers and established)Proto Recv-Q Send-Q Local Address Foreign Address State tcp 0 0 0.0.0.0:netbios-ssn 0.0.0.0:* LISTEN tcp 0 0 localhost:5037 0.0.0.0:* LISTEN tcp 0 0 localhost:domain 0.0.0.0:* LISTEN tcp 0 0 0.0.0.0:ssh 0.0.0.0:* LISTEN tcp 0 0 localhost:ipp 0.0.0.0:* LISTEN tcp 0 0 0.0.0.0:microsoft-ds 0.0.0.0:* LISTEN tcp 0 1 NSGWD180027:44946 10.1.6.6:domain SYN_SENT tcp 0 0 NSGWD180027:60634 113.96.233.144:http CLOSE_WAITtcp 0 0 NSGWD180027:45626 47.95.47.253:https ESTABLISHED... -r 显示IP路由表(跟route指令显示内容一样) 123456$ netstat -rKernel IP routing tableDestination Gateway Genmask Flags MSS Window irtt Ifacedefault _gateway 0.0.0.0 UG 0 0 0 enp1s010.1.152.0 0.0.0.0 255.255.255.0 U 0 0 0 enp1s0link-local 0.0.0.0 255.255.0.0 U 0 0 0 enp1s0 -i 显示网络接口(查看网络接口相关建议使用ifconfig) 12345$ netstat -iKernel Interface tableIface MTU RX-OK RX-ERR RX-DRP RX-OVR TX-OK TX-ERR TX-DRP TX-OVR Flgenp1s0 1500 6400427 0 0 0 2132187 0 0 0 BMRUlo 65536 532597 0 0 0 532597 0 0 0 LRU -s 显示网络统计信息 123456789101112$ netstat -sIp: Forwarding: 2 4803573 total packets received 9283 with invalid addresses 0 forwarded 0 incoming packets discarded 4665596 incoming packets delivered 2659745 requests sent out 2 outgoing packets dropped 511 dropped because of missing route ... -n 不解析名称,直接显示IP地址() 123456789netstat -nvActive Internet connections (w/o servers)Proto Recv-Q Send-Q Local Address Foreign Address State tcp 0 0 10.1.152.229:43548 203.208.41.47:443 ESTABLISHEDtcp 0 1 10.1.152.229:52668 10.128.161.27:445 SYN_SENT tcp 0 0 10.1.152.229:56046 96.43.145.26:443 ESTABLISHEDtcp 0 1 10.1.152.229:52584 10.128.161.27:445 SYN_SENT tcp 0 1 10.1.152.229:54060 216.58.200.14:443 SYN_SENT tcp 0 1 10.1.152.229:60748 10.128.161.27:139 SYN_SENT -p 显示套接字的pid程序名称 12345678$ netstat -np |head -n 10(Not all processes could be identified, non-owned process info will not be shown, you would have to be root to see it all.)Active Internet connections (w/o servers)Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name tcp 0 0 10.1.152.229:37044 113.96.230.37:443 ESTABLISHED - tcp 0 1 10.1.152.229:42914 216.58.199.14:443 SYN_SENT 29400/firefox tcp 0 1 10.1.152.229:42916 216.58.199.14:443 SYN_SENT 29400/firefox -l 仅显示处于监听状态的网络连接 -t/-u 显示tcp/udp连接 -npe 同时显示用户和进程信息 12345$netstat -nepProto Recv-Q Send-Q Local Address Foreign Address State User Inode PID/Program nametcp 0 1 10.1.152.229:51524 172.217.24.46:443 SYN_SENT 1000 3498922041 29400/firefox tcp 0 0 10.1.152.229:35182 54.149.188.75:443 ESTABLISHED 1000 19360947 29400/firefox tcp 0 1 10.1.152.229:51526 172.217.24.46:443 SYN_SENT 1000 3498922042 29400/firefox 如果需要过滤某个服务或用户,可以结合grep或watch指令使用 ssss介绍ss-socket statistics类似netstat,统计socket信息,ss的优势在于它能够显示更多更详细的有关TCP和连接状态的信息，而且比netstat更快速更高效当服务器的socket连接数量变得非常大时，无论是使用netstat命令还是直接cat /proc/net/tcp，执行速度都会很慢。ss快的秘诀在于，它利用到了TCP协议栈中tcp_diag。tcp_diag是一个用于分析统计的模块，可以获得Linux 内核中第一手的信息，这就确保了ss的快捷高效。 ss常见用法ss的参数类似netstat: -a 显示所有socket -r 解析主机名(默认不解析) -m 显示socket memory使用情况 1234567891011ss -am |head -n 10NetidState Recv-Q Send-Q Local Address:Port Peer Address:Port nl UNCONN 0 0 rtnl:avahi-daemon/6836 * skmem:(r0,rb212992,t0,tb212992,f0,w0,o0,bl0,d0) nl UNCONN 0 0 rtnl:-2034236502 * skmem:(r0,rb425984,t0,tb65536,f0,w0,o0,bl0,d0) nl UNCONN 0 0 rtnl:systemd-resolve/860 * skmem:(r0,rb212992,t0,tb212992,f0,w0,o0,bl0,d0) nl UNCONN 0 0 rtnl:packagekitd/1229 * skmem:(r0,rb212992,t0,tb212992,f0,w0,o0,bl0,d0) nl UNCONN 0 0 rtnl:goa-daemon/3578 * skmem:(r0,rb212992,t0,tb212992,f0,w0,o0,bl0,d0) nl UNCONN 0 0 rtnl:kernel * skmem:(r0,rb212992,t0,tb212992,f0,w0,o0,bl0,d0) nl UNCONN 0 0 rtnl:firefox/29400 * skmem:(r0,rb212992,t0,tb212992,f0,w0,o0,bl0,d0) nl UNCONN 0 0 rtnl:chrome/22570 * skmem:(r0,rb212992,t0,tb212992,f0,w0,o0,bl0,d0) nl UNCONN 0 0 rtnl:whoopsie/1333 * skmem:(r0,rb212992,t0,tb212992,f0,w0,o0,bl0,d0) dst/src 匹配目的/源地址socket 12345678$ss dst 10.1.6.11Netid State Recv-Q Send-Q Local Address:Port Peer Address:Port tcp ESTAB 20 0 10.1.152.229:60804 10.1.6.11:microsoft-ds$ ss src 10.1.152.229Netid State Recv-Q Send-Q Local Address:Port Peer Address:Port tcp ESTAB 0 0 10.1.152.229:36916 10.1.6.26:microsoft-ds tcp SYN-SENT 0 1 10.1.152.229:34324 172.217.24.206:https tcp SYN-SENT 0 1 10.1.152.229:34388 172.217.24.206:https 其他一些详细的参数请查询man ss 参考: traceroute命令初探 netstat 的10个基本用法 netstat 命令详解 Linux ss命令详解","categories":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"},{"name":"Network","slug":"Linux/Network","permalink":"http://yoursite.com/categories/Linux/Network/"}],"tags":[{"name":"网络命令","slug":"网络命令","permalink":"http://yoursite.com/tags/网络命令/"}]},{"title":"Wi-Fi频段速查","slug":"Wi-Fi/WifiChannel","date":"2019-02-21T03:27:03.564Z","updated":"2019-02-21T03:27:03.564Z","comments":true,"path":"2019/02/21/Wi-Fi/WifiChannel/","link":"","permalink":"http://yoursite.com/2019/02/21/Wi-Fi/WifiChannel/","excerpt":"","text":"2.4G 20M 信道与频率情况 信道 频宽(MHz) 中心频率(Mhz) 中国 中国台湾 美国 欧洲 日本 韩国 新加坡 加拿大 以色列 澳大利亚 其他大部分国家 1 20 2412 Yes Yes Yes Yes Yes Yes Yes Yes No Yes Yes 2 20 2417 Yes Yes Yes Yes Yes Yes Yes Yes No Yes Yes 3 20 2422 Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes 4 20 2427 Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes 5 20 2432 Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes 6 20 2437 Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes 7 20 2442 Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes 8 20 2447 Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes 9 20 2452 Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes 10 20 2457 Yes Yes Yes Yes Yes Yes Yes Yes No Yes Yes 11 20 2452 Yes Yes Yes Yes Yes Yes Yes Yes No Yes Yes 12 20 2452 Yes No No Yes Yes Yes Yes No No Yes Yes 13 20 2452 Yes No No Yes Yes Yes Yes No No Yes Yes 14 20 2452 No No No No Yes No No No No No No 5G频段Wi-Fi5G大致分为5个段 频段(GHz) 中国 中国台湾 美洲 欧洲 以色列 日本1 日本2 韩国 新加坡 5.15~5.25 No No Yes Yes Yes Yes Yes Yes Yes 5.25~5.35 No Yes Yes Yes Yes No Yes Yes Yes 5.35~5.47 No No No No No No No No No 5.47~5.725 No No No Yes No No No Partial No 5.725~5.825 Yes Yes Yes No No No No Yes Yes 支持的信道数 4 7 12 11 8 4 8 19 12 详细的信道支持情况见下图: 参考如下博客:各种无线技术频段分配详细","categories":[{"name":"Wi-Fi","slug":"Wi-Fi","permalink":"http://yoursite.com/categories/Wi-Fi/"}],"tags":[{"name":"Wi-Fi","slug":"Wi-Fi","permalink":"http://yoursite.com/tags/Wi-Fi/"}]},{"title":"MarkDown基本语法参考","slug":"MarkDown/markdown","date":"2019-02-21T03:26:34.879Z","updated":"2019-02-21T03:26:34.879Z","comments":true,"path":"2019/02/21/MarkDown/markdown/","link":"","permalink":"http://yoursite.com/2019/02/21/MarkDown/markdown/","excerpt":"","text":"一.标题需要设置为标题的文字前面加#来表示（#后面要插一个空格） 一个#是一级标题，两个#是二级标题，以此类推。支持六级标题。 123456# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 一级标题二级标题三级标题四级标题五级标题六级标题二.字体1.斜体斜体文字两端使用一个*（或-） 1*这些是斜体字* 这些是斜体字 2.粗体粗体字两端各加两个*（或-） 1**这些是粗体字** 这些是粗体字 3.粗斜体粗斜体两边各加3个*（或-） 1***这些是粗斜体字*** 这些是粗斜体字 4.删除线文字两边各加2个~ 1~~划去这些文字~~ 划去这些文字 5.分割线3个以上的-或者* 123----这里分割开**** 这里分割开 三.图片图片的语法： 1![图片alt](图片地址 &quot;图片title&quot;) hexo的图片可以用网络图片，也可以用本地的图片 网络图片语法示例： 1![cake1](https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1550820462&amp;di=821f58e09470251cf8811895001cc307&amp;imgtype=jpg&amp;er=1&amp;src=http%3A%2F%2F91cycn.37cy.com%2Fnet91cycn%2F1706%2F17-06-29%2F201706290937009.jpg &quot;蛋糕1&quot;) 需要注意标点符号一定要用英文，否则生成的图片可能只是一个链接，没办法预览 本地图片语法示例（图片路径直接用当前markdown文件所在相对目录即可）： 1![cake2](image/cake2.jpeg &quot;蛋糕示例2&quot;) 四.超链接超链接分行内式和引用式 1.行内式语法：超链接语法(注意标点符号),title可不写： 12[超链接名](超链接地址 &quot;超链接title&quot;)显示链接 &lt;超链接地址&gt; 示例： 1234[百度](http://www.baidu.com) 百度链接 &lt;http:www.baidu.com&gt; [hexo](https://hexo.io/zh-cn/) Hexo链接 &lt;http:www.hexo.io/zh-cn&gt; 百度百度链接 http:www.baidu.comhexoHexo链接 http:www.hexo.io/zh-cn 2.引用语法定义的地方不会显示，只有引用的地方会显示12[baidu]:http://www.baidu.com[baidu] baidu 五.列表1.无序列表使用- * +都可以，符号和文字中间要加一个空格 123- 列表一+ 列表二* 列表三 列表一 列表二 列表三 2.有序列表数字加点即可（点后面要加一个空格） 1231.列表一2.列表二3.列表三 列表一 列表二 列表三 3.嵌套列表再下一级列表前面加三个空格缩进即可 123451. 列表一 1. 列表1-1 2. 列表1-2 1. 列表1-2-1 2. 列表1-2-2 列表一 列表1-1 列表1-2 列表1-2-1 列表1-2-2 六.表格语法 12345678910111213表头|表头|表头---|:--:|---:内容|内容|内容内容|内容|内容第二行分割表头和内容。- 有一个就行，为了对齐，多加了几个文字默认居左-两边加：表示文字居中-右边加：表示文字居右注：原生的语法两边都要用 | 包起来。此处省略整个表格前面必须有一个空行，否则表格判断不成立 1）|、-、:之间的多余空格会被忽略，不影响布局。2）默认标题栏居中对齐，内容居左对齐。3）-:表示内容和标题栏居右对齐，:-表示内容和标题栏居左对齐，:-:表示内容和标题栏居中对齐。4）内容和|之间的多余空格会被忽略，每行第一个|和最后一个|可以省略，-的数量至少有一个。 示例： 12345|Name|Age|Gender||:---:|:---:|:---:|| Amy | 18 | Female || Rex | 18 | Male | 预览： Name Age Gender Amy 18 Female Rex 18 Male 七.代码单行代码 两边直接用`包起来就行 1`You are my exception` You are my exception 多行代码 代码段两边用3个`包起来，且符号单独占一行 12345function fun()&#123; echo &quot;I&apos;m a super man!&quot;;&#125;fun(); 八.流程图1234567st=&gt;start: 开始op=&gt;operation: My Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op st=&gt;start: 开始op=&gt;operation: 操作cond=&gt;condition: 判断？e=&gt;end: 结束st-&gt;cond-&gt;opcond(yes)-&gt;econd(no)-&gt;op 九.格式1.换行直接回车是没办法直接换行的，如果需要显示换行，可以中间加一个空行（这样显示中间会有空行），或者2个空格加一个回车 1234下面换行再次换行（两个空格和回车） 换行结束 下面换行 再次换行（两个空格和回车）换行结束 十.引用在引用文字前加&gt;，嵌套引用则加多个&gt;12345&gt;此行为引用文字&gt;&gt;二级引用&gt;回到一级引用&gt;&gt;&gt;三级引用 此行为引用文字 二级引用 回到一级引用 三级引用","categories":[{"name":"MarkDown","slug":"MarkDown","permalink":"http://yoursite.com/categories/MarkDown/"}],"tags":[{"name":"markdown","slug":"markdown","permalink":"http://yoursite.com/tags/markdown/"}]},{"title":"定位常用概念与术语","slug":"Location/concepts","date":"2019-02-21T03:26:16.315Z","updated":"2019-02-21T03:26:16.315Z","comments":true,"path":"2019/02/21/Location/concepts/","link":"","permalink":"http://yoursite.com/2019/02/21/Location/concepts/","excerpt":"","text":"Location related concepts and terminology定位系统简写GNSS - Global Navigation Satellite System 全球导航卫星系统其概念涵盖所有地球定位系统,包括GPS,Glonass,Galieo,BDS等GPS - Global Positioning System 全球定位系统美国开发的全球定位系统Glonass - 全球卫星导航系统 GLOBAL NAVIGATION SATELLITE SYSTEM(俄语缩写)苏联开发的全球定位系统Galileo - Galileo satellite navigation system 伽利略卫星定位系统由欧盟研制和建立的全球卫星导航定位系统BDS - BeiDou Navigation Satellite System 北斗卫星导航系统中国自行研制的全球卫星导航系统SBAS - Satellite Based Augmentation Systems(DGNSS/DGPS/WAAS/EGNOS)是利用地球静止轨道卫星建立的地区性广域差分增强系统QZSS - Quasi-Zenith Satellite System 准天顶卫星系统日本开发的以三颗人造卫星透过时间转移完成全球定位系统区域性功能的卫星扩增系统IRNSS - Indian Regional Navigation Satellite System 印度区域导航卫星系统GANSS - Galileo and Additional Navigation Satellite Systems 伽利略和附加导航卫星系统AGNSS - Assisted GNSS 辅助全球定位AGPS - Assisted Global Positioning System 辅助GPS其他定位系统前加A的意思都类似,指除了从卫星获取信息进行位置计算外,还会从网络侧获取更多的辅助信息加速位置计算 辅助和网络定位相关SUPL - OMA Secure User Plane LocationLPP - LTE Positioning ProtocolOTDOA - Observed Time Difference of Arrival(到达时间差定位法)ECID - Ehance Community ID 增强型小区定位MBS - Metropolitan Beacon System 城市移动信标系统 GNSS各定位系统频段GPS（US） 频段 频率（MHz） L1-C/A,L1C 1575.42 L2 1227.60 L5 1176.45 Glonass（苏联） 频段 频率（MHz） L1(FDMA) 1602 + n*0.5625 L2(FDMA) 1246 + n*0.4375 L3(CDMA) 1202.025 Galieo（欧洲） 频段 频率（MHz） E1 1575.42 E5 1191.795 E5a 1176.45 E5b 1207.14 E6 1278.75 北斗 频段 频率（MHz） B1-2 1589.742 B1I 1561.098 B3 1268.52 B2I 1207.14 QZSS（Japan） 频段 频率（MHz） L1-C/A,L1C,L1-SAIF 1575.42 L2C 1227.60 L5 1176.45 LEX 1278.75 IRNSS（Indian） 频段 频率（MHz） L5 1176.45 S 2492.028 常用概念Longitude 经度Latitude 纬度Altitude 海拔高度Geoid 大地水准面Ellipsoid and datum 椭圆和基准WGS-84 美国的地图参考系统（椭球坐标与地球坐标转换)various datum parameters 各种基准参数 Four satellites are needed to determine longitude, latitude, altitude and time.需要四颗卫星来确定经度，纬度，高度和时间Each one of these satellites is equipped with onboard atomic clocks.这些卫星中的每一颗都配备有机载原子钟In order to make them even more accurate, they are regularly adjusted or synchronized from various control points on Earth.为了使他们更加精确，他们会经常（定期）从地球上的各个控制点调整和同步。 轨道类型通常，六种不同类别的轨道被分类：地球同步轨道（GEO）：地球静止轨道，海拔约36,000km中地球轨道（MEO）：中等海拔约10,000公里的倾斜轨道低地球轨道（LEO）：低空轨道高达约1000公里高度（倾斜）椭圆地球轨道（HEO）倾斜地球同步轨道（IGSO）极地地球轨道（PEO）：LEO轨道在极地上空 时间系统时间在基于卫星的定位中起着至关重要的作用，GPS区分5中不同的重要时间系统International Atomic Time (TAI) 国际原子时-准确度为每日数纳秒Coordinated Universal Time (UTC) 协调世界时/世界统一时间/世界标准时间-准确度为每日数毫秒GPS Time GPS时-一般GPS时间系统表示为周数和该周的经过秒数Satellite Time 卫星时间Local Time 当地时间 GPS MessageThe GPS message30 is a continuous stream of data transmitted at 50 bits per second. Each satellite relays the following information to Earth:System time and clock correction values - 系统时间和时钟校正值Its own highly accurate orbital data (ephemeris) - 星历Approximate orbital data for all other satellites (almanac) - 历书System health, etc. GPS回传详细信息","categories":[{"name":"Location","slug":"Location","permalink":"http://yoursite.com/categories/Location/"}],"tags":[{"name":"location","slug":"location","permalink":"http://yoursite.com/tags/location/"}]},{"title":"5 ways to kill process","slug":"Linux/Process/4kill","date":"2019-02-21T03:24:04.302Z","updated":"2019-02-21T03:24:04.302Z","comments":true,"path":"2019/02/21/Linux/Process/4kill/","link":"","permalink":"http://yoursite.com/2019/02/21/Linux/Process/4kill/","excerpt":"","text":"kill命令格式kill[参数][进程号] 命令功能发送指定的信号到相应进程。不指定信号将发送SIGTERM（15）终止指定进程。如果仍无法终止该程序可用“-KILL” 参数，其发送的信号为SIGKILL(9) ，将强制结束进程，使用ps命令或者jobs 命令可以查看进程号。root用户将影响用户的进程，非root用户只能影响自己的进程。也就是说kill并不等于杀死进程,它只是向进程发送一个信号,除了强制终止(9 SIGKILL),其他信号进程都可以选择响应或者忽略 信号类型-l 参数可以查看kill支持的所有信号1234567891011121314$ kill -l 1) SIGHUP 2) SIGINT 3) SIGQUIT 4) SIGILL 5) SIGTRAP 6) SIGABRT 7) SIGBUS 8) SIGFPE 9) SIGKILL 10) SIGUSR111) SIGSEGV 12) SIGUSR2 13) SIGPIPE 14) SIGALRM 15) SIGTERM16) SIGSTKFLT 17) SIGCHLD 18) SIGCONT 19) SIGSTOP 20) SIGTSTP21) SIGTTIN 22) SIGTTOU 23) SIGURG 24) SIGXCPU 25) SIGXFSZ26) SIGVTALRM 27) SIGPROF 28) SIGWINCH 29) SIGIO 30) SIGPWR31) SIGSYS 34) SIGRTMIN 35) SIGRTMIN+1 36) SIGRTMIN+2 37) SIGRTMIN+338) SIGRTMIN+4 39) SIGRTMIN+5 40) SIGRTMIN+6 41) SIGRTMIN+7 42) SIGRTMIN+843) SIGRTMIN+9 44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+1348) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-1253) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9 56) SIGRTMAX-8 57) SIGRTMAX-758) SIGRTMAX-6 59) SIGRTMAX-5 60) SIGRTMAX-4 61) SIGRTMAX-3 62) SIGRTMAX-263) SIGRTMAX-1 64) SIGRTMAX 也可以通过信号类型反向查找其编号(编号查找信号类型也可以)1234$ kill -l KILL9$ kill -l 15TERM 默认不带信号编号参数的话,缺省为15,即终止进程进程捕获此信号时，进程在退出之前可以清理并释放资源-9信号使进程强行终止，这常会带来一些副作用，如数据丢失或者终端无法恢复到正常状态。发送信号时必须小心，只有在万不得已时，才用kill信号(9)，因为进程不能首先捕获它。要撤销所有的后台作业，可以输入kill 0。因为有些在后台运行的命令会启动多个进程，跟踪并找到所有要杀掉的进程的PID是件很麻烦的事。这时，使用kill 0来终止所有由当前shell启动的进程，是个有效的方法。 常用的信号：HUP 1 终端断线INT 2 中断（同 Ctrl + C）QUIT 3 退出（同 Ctrl + \\）TERM 15 终止KILL 9 强制终止CONT 18 继续（与STOP相反， fg/bg命令）STOP 19 暂停（同 Ctrl + Z） 命令参数 -l (l为数字)直接发送信号编号给进程 1$kill -9 32253 -s signame 发送信号名/类型给进程 1$kill -s SIGTERM 32253 killall命令格式killall [ -Z CONTEXT ] [ -u USER ] [ -y TIME ] [ -o TIME ] [ -eIgiqrvw ] [ -s SIGNAL | -SIGNAL ] NAME… 命令功能killall命令用于向指定命令(进程)发送信号,如果未指定具体信号,则发送SIGTERM如果killall杀死了至少一个进程,会返回0如果killall没有匹配到任何一个-u或-Z的command,那么返回非0值 信号类型可以使用-l查看支持的信号123$ killall -lHUP INT QUIT ILL TRAP ABRT BUS FPE KILL USR1 SEGV USR2 PIPE ALRM TERM STKFLTCHLD CONT STOP TSTP TTIN TTOU URG XCPU XFSZ VTALRM PROF WINCH POLL PWR SYS 但killall -l不像kill可以直接查询匹配signal和ID 命令参数 -e 匹配完整command名 -I 忽略大小写 -g 终止group相关process -i 交互模式,杀死进程前先询问用户 -o 仅匹配时间较早(更老)的进程 -r 根据正则表达式匹配进程名 -s 直接发送信号名而不是信号ID -u 根据用户user去kill -v 打印verbose log,报告信号是否成功发送 -w 等待所有被杀死的进程死亡。如果任何被杀死的进程仍然存在，则killall每秒检查一次，如果没有剩余进程则仅返回。如果信号被忽略，没有效果，或者进程处于僵尸状态，killall可能会永远等待。 -y 仅匹配时间较晚的进程 -Z (仅限SELinux)指定安全上下文：仅删除具有与给定扩展常规表达式匹配的安全上下文的进程。必须在命令行上的其他参数之前。命令名称是可选的123$killall -KILL nginx 同$killall -9 nginx killall5(仅做介绍)命令功能killall5是SystemV killall命令。 它向除内核线程和其自身会话中的进程之外的所有进程发送信号，因此它不会终止运行调用它的脚本的shell。 它的主要（仅）用途是在/etc/init.d目录中的rc脚本中。 命令参数-o 忽略进程ID pkill命令格式pkill [options] pattern 命令功能类似killall,根据进程名去发送信号pkill会将指定的信号（默认为SIGTERM）发送到每个进程，而不是将它们列在stdout上。 命令参数 -signal 定义要发送到每个匹配进程的信号。可以使用数字或符号信号名称 -f 匹配完整进程名 -g 仅匹配列出的进程组ID中的进程。进程组0被翻译成pgrep或pkill自己的进程组。 -G 仅匹配列出实际组ID的进程。可以使用数值或符号值。 -i 匹配进程不区分大小写。 -n 仅选择最新（最近启动）的匹配流程 -o 仅选择最早（最近最少启动）的匹配流程 pkill参数比较多,需要使用的话请直接查看man pkillpkill可以结合pgrep一起使用12345678$pgrep atom2948 atom2950 atom2952 atom2981 atom3003 atom3107 atom$pkill atom 先使用pgrep查看所有进程相关pid,然后再kill xkill命令格式xkill [-display displayname] [-id resource] [-button number] [-frame] [-all] [-version] 命令功能Xkill是一个强制X服务器关闭客户端连接的实用程序。 此程序非常危险，但对于中止在用户屏幕上显示不需要的窗口的程序非常有用。 如果没有给出-id的资源标识符，则xkill将显示一个特殊光标作为用户选择要杀死的窗口的提示。 如果在非根窗口上按下指针按钮，则服务器将关闭与创建窗口的客户端的连接。 命令参数 -display 此选项指定要联系的X服务器的名称。 -id 此选项指定要中止其创建者的资源的X标识符。如果没有指定资源，xkill将显示一个特殊的光标，您应该使用该光标选择要杀死的窗口。 -button 此选项指定在选择要杀死的窗口时应使用的指针按钮数。如果指定了单词“any”，则可以使用指针上的任何按钮。默认情况下，使用指针映射中的第一个按钮（通常是最左边的按钮）。 -all 此选项表示应杀死屏幕上具有顶级窗口的所有客户端。 Xkill会要求您选择每个当前定义按钮的根窗口，以便为您提供多次中止的机会。强烈建议不要使用此选项。 -frame 此选项表示xkill应忽略查找顶级客户端窗口的标准约定（通常嵌套在窗口管理器窗口中），并且只是认为您要杀死根的直接子级。 参考:1.4 Ways to Kill a Process – kill, killall, pkill, xkill2.linux kill命令详解3.pkill详解","categories":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"},{"name":"Process","slug":"Linux/Process","permalink":"http://yoursite.com/categories/Linux/Process/"}],"tags":[{"name":"kill","slug":"kill","permalink":"http://yoursite.com/tags/kill/"}]},{"title":"lsof命令 - List open files","slug":"Linux/File/lsof","date":"2019-02-21T03:22:20.861Z","updated":"2019-02-21T03:22:20.861Z","comments":true,"path":"2019/02/21/Linux/File/lsof/","link":"","permalink":"http://yoursite.com/2019/02/21/Linux/File/lsof/","excerpt":"","text":"lsof介绍一个列出当前系统打开文件的工具在linux环境下，任何事物都以文件的形式存在，通过文件不仅仅可以访问常规数据，还可以访问网络连接和硬件。在终端下输入lsof即可显示系统打开的文件，因为 lsof 需要访问核心内存和各种文件，所以必须以 root 用户的身份运行它才能够充分地发挥其功能 由于lsof是查看所有系统中打开的文件,内容太多,这里我们只查看前10行1234567891011$ sudo lsof |head -n 10COMMAND PID TID USER FD TYPE DEVICE SIZE/OFF NODE NAMEsystemd 1 root cwd DIR 8,6 4096 2 /systemd 1 root rtd DIR 8,6 4096 2 /systemd 1 root txt REG 8,6 1440088 1048949 /lib/systemd/systemdsystemd 1 root mem REG 8,6 1623216 1054267 /lib/x86_64-linux-gnu/libm-2.28.sosystemd 1 root mem REG 8,6 125128 1048765 /lib/x86_64-linux-gnu/libudev.so.1.6.11systemd 1 root mem REG 8,6 129232 1054245 /lib/x86_64-linux-gnu/libgpg-error.so.0.24.3systemd 1 root mem REG 8,6 43304 1054256 /lib/x86_64-linux-gnu/libjson-c.so.3.0.1systemd 1 root mem REG 8,6 34872 2760995 /usr/lib/x86_64-linux-gnu/libargon2.so.1systemd 1 root mem REG 8,6 432640 1054226 /lib/x86_64-linux-gnu/libdevmapper.so.1.02.1 各列信息意义: COMMAND PID TID USER FD TYPE DEVICE SIZE/OFF NODE NAME 进程名 进程标识符 线程标识符 进程所有者 文件描述符 文件类型 磁盘名称? 文件大小 索引节点 文件完整名字 关于文件描述符FD文件描述符，应用程序通过文件描述符识别该文件 (1）cwd：表示current work dirctory，即：应用程序的当前工作目录，这是该应用程序启动的目录，除非它本身对这个目录进行更改（2）txt ：该类型的文件是程序代码，如应用程序二进制文件本身或共享库，如上列表中显示的 /sbin/init 程序（3）lnn：library references (AIX);（4）er：FD information error (see NAME column);（5）jld：jail directory (FreeBSD);（6）ltx：shared library text (code and data);（7）mxx ：hex memory-mapped type number xx.（8）m86：DOS Merge mapped file;（9）mem：memory-mapped file;（10）mmap：memory-mapped device;（11）pd：parent directory;（12）rtd：root directory;（13）tr：kernel trace file (OpenBSD);（14）v86 VP/ix mapped file;（15）0：表示标准输出（16）1：表示标准输入（17）2：表示标准错误一般在标准输出、标准错误、标准输入后还跟着文件状态模式：r、w、u等（1）u：表示该文件被打开并处于读取/写入模式（2）r：表示该文件被打开并处于只读模式（3）w：表示该文件被打开并处于（4）空格：表示该文件的状态模式为unknow，且没有锁定（5）-：表示该文件的状态模式为unknow，且被锁定同时在文件状态模式后面，还跟着相关的锁（1）N：for a Solaris NFS lock of unknown type;（2）r：for read lock on part of the file;（3）R：for a read lock on the entire file;（4）w：for a write lock on part of the file;（文件的部分写锁）（5）W：for a write lock on the entire file;（整个文件的写锁）（6）u：for a read and write lock of any length;（7）U：for a lock of unknown type;（8）x：for an SCO OpenServer Xenix lock on part of the file;（9）X：for an SCO OpenServer Xenix lock on the entire file;（10）space：if there is no lock. 关于文件类型TYPETYPE：文件类型，如DIR、REG等，常见的文件类型（1）DIR：表示目录（2）CHR：表示字符类型（3）BLK：块设备类型（4）UNIX： UNIX 域套接字（5）FIFO：先进先出 (FIFO) 队列（6）IPv4：网际协议 (IP) 套接字 常用参数直接加文件名1$lsof /home/amy/tool/atom 显示打开此文件的条目 进程相关 -c COMMAND1$lsof -c atom 显示某个进程打开的所有文件 -u user 1$lsof -u root 显示所属某个用户的进程打开的文件1$lsof -u ^root 显示除此用户以外的用户打开的文件 -c和-u也可以一起用,过滤某个用户的某个进程相关文件1$lsof -u root -c atom -p PID1$lsof -p 1 显示PID相关文件情况1$lsof -p 1,2,3 显示多个PID相关文件 文件名,目录 +D 根据文件目录递归显示1$lsof +D /home/amy/ 递归的显示所有目录下的打开的文件 +d 显示此目录下打开的文件,非递归1$lsof +d /home/amy/ 文件类型 -i 显示所有网络连接1$lsof -i -i tcp 显示所有TCP连接1$lsof -i tcp -i udp 显示所有UDP连接1lsof -i udp -i:port 显示端口号相关连接1$lsof -i:60976 -i tcp:port1$lsof -i tcp:60976 完整的-i 网络参数12$lsof -i [protocol][@hostname|hostaddr][:service|port] [protocol]: tcp/udp 4/6(ipv4/ipv6) -d 根据文件描述符 1$lsof -d cwd -N 文件系统 1$lsof –N 显示条件 -t 仅显示符合条件的进程号1$lsof -t -u amy 这样仅会显示用户amy相关进程的进程号,可以配合kill一起使用12$kill -9 `lsof -t -u amy`$kill -9 `-i udp` -a 匹配不同条件&amp;-a相当于是与的条件,可以联系不同的参数使用,如果默认没有a,那就是以或满足条件 1$lsof -u root -a -p 68684 -r repeat模式,每几秒重复操作和显示 1$lsof -i tcp -a -r5 每5s显示一次当前tcp连接 参考以下大佬总结1.使用 lsof 查找打开的文件2.linux lsof命令详解3.Linux lsof命令详解4.lsof命令总结","categories":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"},{"name":"File","slug":"Linux/File","permalink":"http://yoursite.com/categories/Linux/File/"}],"tags":[{"name":"lsof","slug":"lsof","permalink":"http://yoursite.com/tags/lsof/"}]},{"title":"Linux打包压缩相关命令","slug":"Linux/DailyTool/packageTool","date":"2019-02-21T03:21:43.721Z","updated":"2019-02-21T03:21:43.721Z","comments":true,"path":"2019/02/21/Linux/DailyTool/packageTool/","link":"","permalink":"http://yoursite.com/2019/02/21/Linux/DailyTool/packageTool/","excerpt":"","text":"gzip压缩gzip -v filename12$ gzip -v ker.logker.log: 79.1% -- replaced with ker.log.gz 注意 gzip默认压缩完会删除原文件 解压缩gzip -d filename(.gz)1$ gzip -d ker.log.gz 同gzip压缩指令，解压缩后也会删除原压缩文件 用最佳的压缩比压缩,并保留原本的文件123$ gzip -9 -c ker.log &gt; ker.log.gz$ ls ker*ker.log ker.log.gz 如果压缩原文件是文本文件，可以直接用zcat查看用zgrep可以过滤字符串1$ zgrep -n &apos;wcnss&apos; ker.log.gz 还有zmore zless 也都可以使用 bzip2压缩比 比gzip还要高，用法几乎相同 压缩bzip2 -v filename1234$ bzip2 -v ker.log ker.log: 5.298:1, 1.510 bits/byte, 81.13% saved, 197622 in, 37299 out.$ ls ker.log.bz2ker.log.bz2 解压缩bzip2 -d filename（.bz2）123$ bzip2 -d ker.log.bz2$ ls ker.logker.log 保留源文件压缩123$ bzip2 -9 -c ker.log &gt; ker.log.bz2$ ls ker.log*ker.log ker.log.bz2 同样可以使用的字符查看，过滤命令bzcat bzmore bzless bzgrep xz使用方法同gzip和bzip2，压缩比更高12345$ ls -hl ker.log*-rw-r--r-- 1 android android 193K 5月 16 11:57 ker.log-rw-rw-r-- 1 android android 37K 6月 21 16:14 ker.log.bz2-rw-rw-r-- 1 android android 40K 6月 21 16:20 ker.log.gz-rw-rw-r-- 1 android android 33K 6月 21 16:21 ker.log.xz 总结看来,三种压缩方式的压缩比的区别(按压缩文件比例排序): gz&lt;bz2&lt;xz tar仅打包或打包并压缩 选项与参数-c :创建打包文件,可搭配 -v 来察看过程中被打包的文件名(filename)-t :察看打包文件的内容含有哪些文件名,重点在察看“文件名”就是了;-x :解打包或解压缩的功能,可以搭配 -C (大写) 在特定目录解开特别留意的是, -c, -t,-x 不可同时出现在一串命令行中。-z :通过 gzip 的支持进行压缩/解压缩:此时文件名最好为 *.tar.gz-j :通过 bzip2 的支持进行压缩/解压缩:此时文件名最好为 *.tar.bz2-J :通过 xz的支持进行压缩/解压缩:此时文件名最好为 *.tar.xz 特别留意, -z, -j,-J 不可以同时出现在一串命令行中-v :在压缩/解压缩的过程中,将正在处理的文件名显示出来!-f filename:-f后面要立刻接要被处理的文件名!建议 -f 单独写一个选项啰!(比较不会忘记)-C 目录 :这个选项用在解压缩,若要在特定目录解压缩,可以使用这个选项。 打包并压缩打包并压缩后的文件一般称为tarball123$tar -czv -f compress_file.tar.gz filename$tar -cjv -f compress_file.tar.bz2 filename$tar -cJv -f compress_file.tar.xz filename 这里注意压缩后文件名都有加tar.* 主要用于区分是纯压缩（gzip，bzip2，xz）还是打包压缩（tar） 解压123$tar -xzv -f compress_file.tar.gz -C 解压目录（如果不用-C指向解压目录，默认加压到当前目录）$tar -xjv -f compress_file.tar.bz2$tar -xJv -f compress_file.tar.xz 打包打包后的文件一般称为tarfile不带压缩参数即可1$tar -cvf package_file.tar filename 拆包1$tar -xvf package_file.tar","categories":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"},{"name":"DailyTool","slug":"Linux/DailyTool","permalink":"http://yoursite.com/categories/Linux/DailyTool/"}],"tags":[{"name":"打包压缩","slug":"打包压缩","permalink":"http://yoursite.com/tags/打包压缩/"}]},{"title":"Welcome Amy personal site","slug":"index","date":"2019-02-21T02:30:12.752Z","updated":"2019-02-21T02:30:12.752Z","comments":true,"path":"2019/02/21/index/","link":"","permalink":"http://yoursite.com/2019/02/21/index/","excerpt":"","text":"欢迎来到我的笔记网站，刚刚学习使用 Hexo! 可以参考hexo文档 documentation 。暂时不开放评论功能，如果你看到了我的网站，希望我的积累点滴也能帮助到你。如果网站遇到问题到这里 troubleshooting 。 Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}